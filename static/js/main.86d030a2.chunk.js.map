{"version":3,"sources":["components/Redux/action.js","components/Redux/Contact-reduser/contact-reducer.js","components/Redux/Filter-reducer/filter-reducer.js","components/Redux/store.js","components/ContactList/renderContactList.js","components/Filter/filter.js","components/ContactForm/contactForm.js","App.js","index.js"],"names":["newContactAction","createAction","filterAction","deleteAction","contactsReducer","createReducer","id","name","number","state","action","payload","filter","i","filterReducer","rootReducer","combineReducers","contacts","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","filterContacts","lowerValue","toLowerCase","includes","connect","dispatch","deleteContact","length","map","className","type","onClick","filterValue","target","value","pattern","onChange","addContact","contact","useState","setState","newContact","newObj","shortid","generate","formInput","reset","onSubmit","e","preventDefault","find","alert","placeholder","title","required","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.86d030a2.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const newContactAction = createAction('new-contacts');\r\nexport const filterAction = createAction('filter');\r\nexport const deleteAction = createAction('delete');\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { newContactAction, deleteAction } from '../action';\r\n\r\nconst defaultContacts = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\n\r\nconst contactsReducer = createReducer(defaultContacts, {\r\n  [newContactAction]: (state, action) => [action.payload, ...state],\r\n  [deleteAction]: (state, action) => state.filter(i => i.id !== action.payload),\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { filterAction } from '../action';\r\n\r\nconst filterReducer = createReducer('', {\r\n  [filterAction]: (state, action) => action.payload,\r\n});\r\n\r\nexport default filterReducer;\r\n","import { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './Contact-reduser/contact-reducer';\r\nimport filterReducer from './Filter-reducer/filter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n  filter: filterReducer,\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteAction } from '../Redux/action';\r\n\r\nfunction RenderContactList({ contacts, deleteContact }) {\r\n  return (\r\n    <div>\r\n      <ul>\r\n        {contacts.length === 0 ? (\r\n          <h2>No contacts</h2>\r\n        ) : (\r\n          contacts.map(({ id, name, number }) => {\r\n            return (\r\n              <li key={id}>\r\n                {name}: {number}\r\n                <button\r\n                  className=\"item-list\"\r\n                  id={id}\r\n                  type=\"button\"\r\n                  onClick={() => deleteContact(id)}\r\n                >\r\n                  Delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst filterContacts = (contacts, filter) => {\r\n  return contacts.filter(({ name }) => {\r\n    const lowerValue = filter.toLowerCase();\r\n    return name.toLowerCase().includes(lowerValue);\r\n  });\r\n};\r\n\r\nconst stateProp = ({ contacts, filter }) => ({\r\n  contacts: filterContacts(contacts, filter),\r\n  filter,\r\n});\r\n\r\nconst deleteDispatch = dispatch => ({\r\n  deleteContact: id => dispatch(deleteAction(id)),\r\n});\r\n\r\nexport default connect(stateProp, deleteDispatch)(RenderContactList);\r\n\r\nRenderContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  filter: PropTypes.string,\r\n};\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { filterAction } from '../Redux/action';\r\n\r\nfunction Filter({ filterValue, filter }) {\r\n  return (\r\n    <label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        onChange={filterValue}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nconst stateProp = state => ({\r\n  filter: state.filter,\r\n});\r\n\r\nconst filterDispatch = dispatch => ({\r\n  filterValue: ({ target }) => dispatch(filterAction(target.value)),\r\n});\r\n\r\nexport default connect(stateProp, filterDispatch)(Filter);\r\n\r\nFilter.propTypes = {\r\n  filterInput: PropTypes.func,\r\n  Filter: PropTypes.string,\r\n};\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { newContactAction } from '../Redux/action';\r\nimport PropTypes from 'prop-types';\r\nimport shortid from 'shortid';\r\n\r\nfunction ContactForm({ contacts, addContact }) {\r\n  const [state, setState] = useState({\r\n    name: '',\r\n    number: '',\r\n  });\r\n\r\n  const checkContact = () => {\r\n    contacts.find(({ name }) => {\r\n      return name === state.name;\r\n    })\r\n      ? alert(`${state.name} is already in contacts.`)\r\n      : newContact();\r\n  };\r\n\r\n  const newContact = () => {\r\n    const { name, number } = state;\r\n    const newObj = { name, number, id: shortid.generate() };\r\n\r\n    addContact(newObj);\r\n  };\r\n\r\n  const formInput = ({ target }) => {\r\n    const { name, value } = target;\r\n    setState({ ...state, [name]: value });\r\n  };\r\n\r\n  const formSubmit = e => {\r\n    e.preventDefault();\r\n    checkContact();\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setState({ name: '', number: '' });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={state.name}\r\n          placeholder=\"Kris Evans\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={formInput}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={state.number}\r\n          placeholder=\"555-55-55\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={formInput}\r\n        />\r\n      </label>\r\n      <button className=\"submit_form\" type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst stateProps = state => ({\r\n  contacts: state.contacts,\r\n});\r\n\r\nconst newContactDispatch = dispatch => ({\r\n  addContact: contact => dispatch(newContactAction(contact)),\r\n});\r\n\r\nexport default connect(stateProps, newContactDispatch)(ContactForm);\r\n\r\nContactForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n","import './App.css';\r\nimport RenderContactList from './components/ContactList/renderContactList';\r\nimport Filter from './components/Filter/filter';\r\nimport ContactForm from './components/ContactForm/contactForm';\r\n\r\nfunction App() {\r\n  return (\r\n    <section>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <RenderContactList />\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { Provider } from 'react-redux';\r\nimport { store, persistor } from './components/Redux/store';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <PersistGate loading={null} persistor={persistor}>\r\n        <App />\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}